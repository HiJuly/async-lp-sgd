#include <stdlib.h>
#include <random>

#include "data.hpp"
#include "mblas.hpp"

#if DATA_TYPE == RANDOM

float *data_W_true;
const int data_n_train = 10000;
const int data_n_test  = 1000;
const int data_d = 256;

const int data_W_seed = 1239013;
const int data_train_seed = 943851;
const int data_test_seed = 87231;

float data_w_opt[256] = {-0.00151965822252, -0.0412423079516, 0.00258520551645, 0.0173496087218, -0.0341393073113, 0.0227606414305, 0.0292163062449, 0.00856632891341, -0.043603154521, 0.0302960394679, -0.00678283118654, 0.0497038135544, -0.0552309768719, -0.035891484179, -0.00798969663441, -0.0304364060266, 0.00687786962807, 0.0365301760294, 0.0278998721465, -0.0300009367385, -0.0149263435711, -0.0238228341049, 0.0121458070771, 0.0184832216945, -0.0389096334277, 0.0333073858862, -0.0301542819613, 0.00771896932541, 0.00624477492949, 0.0298061506746, 0.00173046769853, -0.0239043253223, -0.0189078271524, -0.00641119955959, -0.0385827120826, 0.00028155473505, -0.0524363805515, 0.0211605938807, 0.0167186532955, 0.0416589913475, 0.0266608465805, -0.00349544024216, -0.0205968184379, 0.0135846098343, 0.00170030674533, -0.01399830785, -0.0428764363154, -0.0324985053827, -0.0271646319797, -0.0180887264407, 0.0124374530955, -0.0325305245537, 0.00154001172759, -0.0251419155298, 0.00923338651554, 0.00571453048135, -0.0010521182474, 0.00700019525676, -0.0140353248154, 0.0716670891108, 0.0156242334829, 0.0469452867003, -0.0164450811465, -0.0124056149241, 0.0270935885228, 0.0320627968862, -0.00552001310606, 0.000403809426413, 0.0172692369251, 0.0287295053064, 0.0151295151054, -0.0156343402827, 0.00659967819522, 0.0040699054045, 0.0205102858852, 0.023501244508, -0.0292046574414, 0.0148688000679, 0.00331002039105, -0.0300208631346, -0.0215460900105, -0.0201524676209, 0.0135424344051, -0.0477620316819, 0.0417981151672, -0.00458578528267, 0.0152649914468, -0.0133875195072, 0.0272089797361, 0.018233261546, -0.0091846243021, -0.00124493606184, 0.02566929581, 0.00660917570149, -0.0110761458466, 0.0299196120629, -0.00806367593273, 0.0321425271278, 0.0195160317949, 0.0474616398981, -0.00839766692543, 0.0228889045702, -0.0117033959826, 0.0195666183091, -0.0117091448357, 0.0338025540047, 0.0409759417894, -0.0279335658202, 0.0281845028314, -0.0173052892867, -0.0181772961058, -0.053220263678, -0.0215720293663, 0.0177744085725, -0.00206757531423, 0.0327907807044, 0.0292286735099, 0.0502769397793, 0.00951604868065, 0.0204225960112, 0.0220677362484, -0.0227630792756, -0.0138250506666, -0.00561438447577, 0.0183059431686, -0.0186010049734, -0.0397093414795, 0.0488280507663, -0.0119623457634, 0.02019891213, 0.00773555944248, -0.00343389096826, -0.0141466976325, -0.0247114127821, 0.0127433512064, -0.000987669809519, 0.0184889804001, -0.0233954297141, 0.0136475401047, -0.0352810864498, -0.0147752293115, -0.00661068271857, 0.0313743497596, 0.0111709401387, 0.0092696726302, 0.00431813215933, -0.00774963088989, 0.0268193793085, -0.0244857709481, -0.0246159973317, 0.0180181219048, -0.00824223362167, 0.00480746938603, 0.00825261380567, 0.0111152524684, -0.0069815734271, 0.0343617628427, -0.0202374339751, 0.012479811845, -0.0197609193611, -0.0147701672669, -0.0299511405418, -0.00859166600375, 0.0776978346476, 0.0598899619098, -0.0179831087006, -0.00665825700467, -0.0230778665185, -0.0131779105712, 0.0140912026051, 0.0129000423641, -0.0383915316834, 0.0109170048799, 0.0122507443799, 0.00381145197134, -0.00128733541741, 0.0011187956496, 0.0220374825746, -0.00844672638904, -0.0235508604028, -0.0288442247586, 0.0012146597606, 0.0215537782081, -0.00815694351804, -0.000243179082853, -0.0135736833939, -0.0258981437871, 0.0123998943067, 0.00203627829706, -0.0259351797695, -0.0061803567919, 0.00553834046899, 0.0385767329227, 0.00157163855217, 0.0421678722831, -0.0334432545091, 0.0129601373027, 0.0507334584927, 0.0418377078322, 0.0184914826107, -0.0673586028726, 0.0259715461524, 0.0237490650181, -0.0260187126668, 0.0219960598718, 0.014046622407, -0.0605168722593, -0.00441736452195, -0.0357793205248, -0.00729378875746, -0.0205844413672, -0.00228910662127, 0.0316215620719, 0.0284158255536, -0.0162928340445, -0.00152007294026, 0.0283091031977, -0.0303136282476, -0.00314685331957, -0.0268555268915, 0.00109556216555, -0.0117960052721, -0.0253882304188, -0.00461913879687, 0.00640686570948, 0.0112991190835, -0.001752049684, -0.000299653212574, -0.0159838407535, 0.00107393677289, -0.00839270103056, -0.0328514986723, -0.0178878742506, 0.00512173937108, 0.0324829925168, 0.0234832821535, 0.0239715805288, 0.0145669718489, 0.0403030993077, 0.00227215492607, 0.0148504961071, 0.0281339139425, 0.036001293685, 0.00402255649645, 0.000751929598079, -0.0625866590323, -0.0359998797377, -0.026176343957, 0.0261185794163, 0.0350445186462, 0.0126582079415, 0.00637923595456, -0.0168640446452, -0.0284589359604, 0.016952592003, -0.000238787270597};

std::normal_distribution<float> data_normal_dist(0, 1);
std::uniform_real_distribution<float> data_uniform_dist(0, 1);

void init_data() {
  std::mt19937 gen(data_W_seed);

  data_W_true = (float*) malloc(sizeof(float) * data_d);
  for (unsigned int i = 0; i < data_d; i++) {
    data_W_true[i] = data_normal_dist(gen) / 100;
  }
}

dataset_t data_get_dataset(const int n, const int seed) {
  dataset_t res(n, data_d, 1);

  res.w_opt = data_w_opt;
  res.labels_oh = (float*) malloc(sizeof(float) * n * 2);
  res.labels_idx = (int*) malloc(sizeof(int) * n);
  res.image = (float*) malloc(sizeof(float) * n * data_d);

  std::mt19937 gen(seed);

  for (int i = 0; i < n; i++) {
    float dot_res = 0;
    for (int j = 0; j < data_d; j++) {
      float datum = data_normal_dist(gen);
      dot_res += data_W_true[j] * datum;
      res.image[i * data_d + j] = datum;
    }
    float p = 1 / (1 + expf(-dot_res)) + data_normal_dist(gen) / 5;
    if (data_uniform_dist(gen) < p) {
      res.labels_oh[i * 2] = 0;
      res.labels_oh[i * 2 + 1] = 1;
      res.labels_idx[i] = 1;
    } else {
      res.labels_oh[i * 2] = 1;
      res.labels_oh[i * 2 + 1] = 0;
      res.labels_idx[i] = -1;
    }
  }

  return res;
}

dataset_t get_train_dataset() {
  return data_get_dataset(data_n_train, data_train_seed);
}
dataset_t get_test_dataset() {
  return data_get_dataset(data_n_test, data_test_seed);
}

#endif /* DATA_TYPE */
